#version 450

#define WORKGROUP_SIZE 8
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_EXT_shader_atomic_int64 : enable
#extension GL_EXT_shader_image_int64 : enable
layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D hwrDepthBuffer;
layout(set = 0, binding = 1, r32ui) uniform uimage2D hwrVisBuffer;
layout(set = 0, binding = 2, r64ui) uniform u64image2D swrDepthVisBuffer;
layout(set = 0, binding = 3, r32f) uniform image2D finalDepthBuffer;
layout(set = 0, binding = 4, r32ui) uniform uimage2D finalVisBuffer;


void main()
{
    uvec2 screenSize = imageSize(hwrVisBuffer).xy;
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    if(index.x>=screenSize.x || index.y>=screenSize.y) return;
    vec2 uv = vec2(index+vec2(0.5))/screenSize;
    float hwrDepth = texture(hwrDepthBuffer,uv).x;
    uint hwrVis = imageLoad(hwrVisBuffer,index).x;
    uint64_t swrDepthVis = imageLoad(swrDepthVisBuffer,index).x;
    bool swrValid = !(swrDepthVis==0x0000000000000000UL);
    float swrDepth = swrValid?1.0-uintBitsToFloat(uint(((uint64_t(swrDepthVis&0xFFFFFFFF00000000UL))>>32))):1.0;
    uint swrVis = swrValid?uint(swrDepthVis&0xFFFFFFFF):0xFFFFFFFF;
    float finalDepth = swrDepth<hwrDepth?swrDepth:hwrDepth;
    uint finalVis = swrDepth<hwrDepth?swrVis:hwrVis;

    imageStore(finalDepthBuffer,index,vec4(finalDepth));
    imageStore(finalVisBuffer,index,uvec4(finalVis));
}